package main

import (
	"encoding/hex"
	"fmt"
	"math/big"

	"github.com/piligo/gmsm/sm2"
)

type Sm2Signature struct {
	R, S *big.Int
}

func ServerKeyExchange() {
	client_random := "403cc1b00baab1e6e5c060281a2f9f2f90ed750c709ca1f1fdeafde6247fea4d"
	server_random := "07dff5f4a9c898f1e83de6f1b0fd5722e4e77cae0985e568275963f9bc1fb732"
	se_len := "00021d"
	se_cert_hex := "30820219308201c0a00302010202090093eced1db7b5296e300a06082a811ccf55018375308182310b300906035504061302434e310b300906035504080c02424a3110300e06035504070c074861694469616e31253023060355040a0c1c4265696a696e67204a4e544120546563686e6f6c6f6779204c54442e31153013060355040b0c0c534f5242206f6620544153533116301406035504030c0d546573742043412028534d3229301e170d3230303632333033313034365a170d3234303830313033313034365a308185310b300906035504061302434e310b300906035504080c02424a3110300e06035504070c074861694469616e31253023060355040a0c1c4265696a696e67204a4e544120546563686e6f6c6f6779204c54442e31153013060355040b0c0c42535243206f6620544153533119301706035504030c1073657276657220656e632028534d32293059301306072a8648ce3d020106082a811ccf5501822d03420004d712ffb5d887aef68fa30a808ec24c9ba575267844cefea2847a222a51013168a3ef609d870e67358a820733e28e27fdfa3ae207e8c1988976497d9433836c50a31a301830090603551d1304023000300b0603551d0f040403020338300a06082a811ccf55018375034700304402207395a8969b1634918a011cf031de67302b6bd6c79290b529609ab685dd8205080220328c1ff8262c746f461cbdf2c2b2ff108c9eba9070d7138d924c8dd8d15f0a47"

	//ss服务端证书
	ss_cert_hex := "3082021a308201c1a00302010202090093eced1db7b5296d300a06082a811ccf55018375308182310b300906035504061302434e310b300906035504080c02424a3110300e06035504070c074861694469616e31253023060355040a0c1c4265696a696e67204a4e544120546563686e6f6c6f6779204c54442e31153013060355040b0c0c534f5242206f6620544153533116301406035504030c0d546573742043412028534d3229301e170d3230303632333033313034365a170d3234303830313033313034365a308186310b300906035504061302434e310b300906035504080c02424a3110300e06035504070c074861694469616e31253023060355040a0c1c4265696a696e67204a4e544120546563686e6f6c6f6779204c54442e31153013060355040b0c0c42535243206f662054415353311a301806035504030c11736572766572207369676e2028534d32293059301306072a8648ce3d020106082a811ccf5501822d034200043afd5333584a347fde39ab18c51d3b137020024b5db125228d86748b257fbb73ffea061f0d5fd4ad28e26d292b50c0d52d93c1db733141441a009cd10ad09a7ba31a301830090603551d1304023000300b0603551d0f0404030206c0300a06082a811ccf550183750347003044021f49b61b3d68462ba2d77c210dc34133ba6d858d2ee843ae5690b50f43d1d285022100f5d1b83500f8b16946e5577f98891e73b0ac270fe8eeda850090644cd430fc05"
	//签名的结果数据
	verify_out_hex := "3046022100b04b0aa7232a354349a385269e09630ef8fdcb79391d2ff8684caacd0e61fde7022100a84c455017134307a70844b5bf73ed010671bffb628f9c1b2e910a71f860259c"

	signture_data_hex := client_random + server_random + se_len + se_cert_hex
	signture_data, _ := hex.DecodeString(signture_data_hex)
	verify_out, _ := hex.DecodeString(verify_out_hex)
	ss_cert_data, _ := hex.DecodeString(ss_cert_hex)

	ss_cert, err := sm2.ParseCertificate(ss_cert_data)
	if err != nil {
		fmt.Println("sm2 ParseCertificate err->", err)
		return
	}

	//解析出公钥
	pubk, ok := ss_cert.PublicKey.(*sm2.PublicKey)
	fmt.Println("ok->", ok)

	if !ok {
		fmt.Println("ok pubk->", pubk)
		//		fmt.Println("ok pub X->", pubk.X.Text(16))
		//		fmt.Println("ok pub Y->", pubk.Y.Text(16))
		return
	}
	fmt.Println("Verify out->", pubk.Verify(signture_data, verify_out))
}

func main() {
	ServerKeyExchange()

}
